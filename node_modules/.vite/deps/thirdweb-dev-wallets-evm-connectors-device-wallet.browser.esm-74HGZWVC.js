import {
  TWConnector
} from "./chunk-DCR354S2.js";
import {
  normalizeChainId
} from "./chunk-ZD2O36CB.js";
import {
  _classPrivateFieldGet,
  _classPrivateFieldInitSpec,
  _classPrivateFieldSet
} from "./chunk-GI3CIENS.js";
import {
  _defineProperty
} from "./chunk-44DZRTPR.js";
import {
  init_lib7 as init_lib
} from "./chunk-GTQDYEZ2.js";
import {
  lib_exports19 as lib_exports
} from "./chunk-AVG4MCCG.js";
import "./chunk-XLOOGUEN.js";
import "./chunk-2O4376VB.js";
import {
  init_shim
} from "./chunk-ZGMFR26H.js";
import "./chunk-IKJM6GHQ.js";

// node_modules/@thirdweb-dev/wallets/evm/connectors/device-wallet/dist/thirdweb-dev-wallets-evm-connectors-device-wallet.browser.esm.js
init_shim();
init_lib();
var _wallet = /* @__PURE__ */ new WeakMap();
var _provider = /* @__PURE__ */ new WeakMap();
var _signer = /* @__PURE__ */ new WeakMap();
var DeviceWalletConnector = class extends TWConnector {
  constructor(options) {
    super();
    _defineProperty(this, "id", "device_wallet");
    _defineProperty(this, "name", "Device Wallet");
    _defineProperty(this, "options", void 0);
    _classPrivateFieldInitSpec(this, _wallet, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _provider, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _signer, {
      writable: true,
      value: void 0
    });
    _defineProperty(this, "shimDisconnectKey", "deviceWallet.shimDisconnect");
    _defineProperty(this, "onChainChanged", (chainId) => {
      const id = normalizeChainId(chainId);
      const unsupported = !this.options.chains.find((c) => c.chainId === id);
      this.emit("change", {
        chain: {
          id,
          unsupported
        }
      });
    });
    this.options = options;
    _classPrivateFieldSet(this, _wallet, options.wallet);
  }
  async connect(args) {
    await this.initializeDeviceWallet(args.password);
    if (args.chainId) {
      this.switchChain(args.chainId);
    }
    const signer = await this.getSigner();
    const address = await signer.getAddress();
    return address;
  }
  async initializeDeviceWallet(password) {
    const savedAddr = await _classPrivateFieldGet(this, _wallet).getSavedWalletAddress();
    if (!savedAddr) {
      await _classPrivateFieldGet(this, _wallet).generateNewWallet();
      await _classPrivateFieldGet(this, _wallet).save(password);
    } else {
      await _classPrivateFieldGet(this, _wallet).loadSavedWallet(password);
    }
  }
  async disconnect() {
    _classPrivateFieldSet(this, _provider, void 0);
    _classPrivateFieldSet(this, _signer, void 0);
  }
  async getAddress() {
    const signer = await this.getSigner();
    if (!signer) {
      throw new Error("No signer found");
    }
    return await signer.getAddress();
  }
  async isConnected() {
    try {
      const addr = await this.getAddress();
      return !!addr;
    } catch {
      return false;
    }
  }
  async getProvider() {
    if (!_classPrivateFieldGet(this, _provider)) {
      _classPrivateFieldSet(this, _provider, new lib_exports.JsonRpcBatchProvider(this.options.chain.rpc[0]));
    }
    return _classPrivateFieldGet(this, _provider);
  }
  async getSigner() {
    if (!_classPrivateFieldGet(this, _wallet)) {
      throw new Error("No wallet found");
    }
    if (!_classPrivateFieldGet(this, _signer)) {
      const provider = await this.getProvider();
      _classPrivateFieldSet(this, _signer, await _classPrivateFieldGet(this, _wallet).getSigner(provider));
    }
    return _classPrivateFieldGet(this, _signer);
  }
  async switchChain(chainId) {
    const chain = this.options.chains.find((c) => c.chainId === chainId);
    if (!chain) {
      throw new Error("Chain not found");
    }
    _classPrivateFieldSet(this, _provider, new lib_exports.JsonRpcBatchProvider(chain.rpc[0]));
    _classPrivateFieldSet(this, _signer, await _classPrivateFieldGet(this, _wallet).getSigner(_classPrivateFieldGet(this, _provider)));
    this.onChainChanged(chainId);
  }
  async setupListeners() {
  }
  updateChains(chains) {
    this.options.chains = chains;
  }
};
export {
  DeviceWalletConnector
};
//# sourceMappingURL=thirdweb-dev-wallets-evm-connectors-device-wallet.browser.esm-74HGZWVC.js.map
