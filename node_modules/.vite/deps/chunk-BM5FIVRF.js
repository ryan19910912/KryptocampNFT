import {
  init_shim,
  require_buffer
} from "./chunk-ZGMFR26H.js";
import {
  __toESM
} from "./chunk-IKJM6GHQ.js";

// node_modules/@web3modal/core/dist/index.js
init_shim();

// node_modules/valtio/esm/vanilla.mjs
init_shim();

// node_modules/proxy-compare/dist/index.modern.js
init_shim();
var e = Symbol();
var t = Symbol();
var s = Object.getPrototypeOf;
var c = /* @__PURE__ */ new WeakMap();
var l = (e2) => e2 && (c.has(e2) ? c.get(e2) : s(e2) === Object.prototype || s(e2) === Array.prototype);
var y = (e2) => l(e2) && e2[t] || null;
var h = (e2, t2 = true) => {
  c.set(e2, t2);
};

// node_modules/valtio/esm/vanilla.mjs
var isObject = (x2) => typeof x2 === "object" && x2 !== null;
var proxyStateMap = /* @__PURE__ */ new WeakMap();
var refSet = /* @__PURE__ */ new WeakSet();
var buildProxyFunction = (objectIs = Object.is, newProxy = (target, handler) => new Proxy(target, handler), canProxy = (x2) => isObject(x2) && !refSet.has(x2) && (Array.isArray(x2) || !(Symbol.iterator in x2)) && !(x2 instanceof WeakMap) && !(x2 instanceof WeakSet) && !(x2 instanceof Error) && !(x2 instanceof Number) && !(x2 instanceof Date) && !(x2 instanceof String) && !(x2 instanceof RegExp) && !(x2 instanceof ArrayBuffer), defaultHandlePromise = (promise) => {
  switch (promise.status) {
    case "fulfilled":
      return promise.value;
    case "rejected":
      throw promise.reason;
    default:
      throw promise;
  }
}, snapCache = /* @__PURE__ */ new WeakMap(), createSnapshot = (target, version, handlePromise = defaultHandlePromise) => {
  const cache = snapCache.get(target);
  if ((cache == null ? void 0 : cache[0]) === version) {
    return cache[1];
  }
  const snap = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));
  h(snap, true);
  snapCache.set(target, [version, snap]);
  Reflect.ownKeys(target).forEach((key) => {
    if (Object.getOwnPropertyDescriptor(snap, key)) {
      return;
    }
    const value = Reflect.get(target, key);
    const desc = {
      value,
      enumerable: true,
      configurable: true
    };
    if (refSet.has(value)) {
      h(value, false);
    } else if (value instanceof Promise) {
      delete desc.value;
      desc.get = () => handlePromise(value);
    } else if (proxyStateMap.has(value)) {
      const [target2, ensureVersion] = proxyStateMap.get(
        value
      );
      desc.value = createSnapshot(
        target2,
        ensureVersion(),
        handlePromise
      );
    }
    Object.defineProperty(snap, key, desc);
  });
  return snap;
}, proxyCache = /* @__PURE__ */ new WeakMap(), versionHolder = [1, 1], proxyFunction = (initialObject) => {
  if (!isObject(initialObject)) {
    throw new Error("object required");
  }
  const found = proxyCache.get(initialObject);
  if (found) {
    return found;
  }
  let version = versionHolder[0];
  const listeners = /* @__PURE__ */ new Set();
  const notifyUpdate = (op, nextVersion = ++versionHolder[0]) => {
    if (version !== nextVersion) {
      version = nextVersion;
      listeners.forEach((listener) => listener(op, nextVersion));
    }
  };
  let checkVersion = versionHolder[1];
  const ensureVersion = (nextCheckVersion = ++versionHolder[1]) => {
    if (checkVersion !== nextCheckVersion && !listeners.size) {
      checkVersion = nextCheckVersion;
      propProxyStates.forEach(([propProxyState]) => {
        const propVersion = propProxyState[1](nextCheckVersion);
        if (propVersion > version) {
          version = propVersion;
        }
      });
    }
    return version;
  };
  const createPropListener = (prop) => (op, nextVersion) => {
    const newOp = [...op];
    newOp[1] = [prop, ...newOp[1]];
    notifyUpdate(newOp, nextVersion);
  };
  const propProxyStates = /* @__PURE__ */ new Map();
  const addPropListener = (prop, propProxyState) => {
    if ((import.meta.env && import.meta.env.MODE) !== "production" && propProxyStates.has(prop)) {
      throw new Error("prop listener already exists");
    }
    if (listeners.size) {
      const remove = propProxyState[3](createPropListener(prop));
      propProxyStates.set(prop, [propProxyState, remove]);
    } else {
      propProxyStates.set(prop, [propProxyState]);
    }
  };
  const removePropListener = (prop) => {
    var _a;
    const entry = propProxyStates.get(prop);
    if (entry) {
      propProxyStates.delete(prop);
      (_a = entry[1]) == null ? void 0 : _a.call(entry);
    }
  };
  const addListener = (listener) => {
    listeners.add(listener);
    if (listeners.size === 1) {
      propProxyStates.forEach(([propProxyState, prevRemove], prop) => {
        if ((import.meta.env && import.meta.env.MODE) !== "production" && prevRemove) {
          throw new Error("remove already exists");
        }
        const remove = propProxyState[3](createPropListener(prop));
        propProxyStates.set(prop, [propProxyState, remove]);
      });
    }
    const removeListener = () => {
      listeners.delete(listener);
      if (listeners.size === 0) {
        propProxyStates.forEach(([propProxyState, remove], prop) => {
          if (remove) {
            remove();
            propProxyStates.set(prop, [propProxyState]);
          }
        });
      }
    };
    return removeListener;
  };
  const baseObject = Array.isArray(initialObject) ? [] : Object.create(Object.getPrototypeOf(initialObject));
  const handler = {
    deleteProperty(target, prop) {
      const prevValue = Reflect.get(target, prop);
      removePropListener(prop);
      const deleted = Reflect.deleteProperty(target, prop);
      if (deleted) {
        notifyUpdate(["delete", [prop], prevValue]);
      }
      return deleted;
    },
    set(target, prop, value, receiver) {
      const hasPrevValue = Reflect.has(target, prop);
      const prevValue = Reflect.get(target, prop, receiver);
      if (hasPrevValue && (objectIs(prevValue, value) || proxyCache.has(value) && objectIs(prevValue, proxyCache.get(value)))) {
        return true;
      }
      removePropListener(prop);
      if (isObject(value)) {
        value = y(value) || value;
      }
      let nextValue = value;
      if (value instanceof Promise) {
        value.then((v) => {
          value.status = "fulfilled";
          value.value = v;
          notifyUpdate(["resolve", [prop], v]);
        }).catch((e2) => {
          value.status = "rejected";
          value.reason = e2;
          notifyUpdate(["reject", [prop], e2]);
        });
      } else {
        if (!proxyStateMap.has(value) && canProxy(value)) {
          nextValue = proxyFunction(value);
        }
        const childProxyState = !refSet.has(nextValue) && proxyStateMap.get(nextValue);
        if (childProxyState) {
          addPropListener(prop, childProxyState);
        }
      }
      Reflect.set(target, prop, nextValue, receiver);
      notifyUpdate(["set", [prop], value, prevValue]);
      return true;
    }
  };
  const proxyObject = newProxy(baseObject, handler);
  proxyCache.set(initialObject, proxyObject);
  const proxyState = [
    baseObject,
    ensureVersion,
    createSnapshot,
    addListener
  ];
  proxyStateMap.set(proxyObject, proxyState);
  Reflect.ownKeys(initialObject).forEach((key) => {
    const desc = Object.getOwnPropertyDescriptor(
      initialObject,
      key
    );
    if ("value" in desc) {
      proxyObject[key] = initialObject[key];
      delete desc.value;
      delete desc.writable;
    }
    Object.defineProperty(baseObject, key, desc);
  });
  return proxyObject;
}) => [
  proxyFunction,
  proxyStateMap,
  refSet,
  objectIs,
  newProxy,
  canProxy,
  defaultHandlePromise,
  snapCache,
  createSnapshot,
  proxyCache,
  versionHolder
];
var [defaultProxyFunction] = buildProxyFunction();
function proxy(initialObject = {}) {
  return defaultProxyFunction(initialObject);
}
function subscribe(proxyObject, callback, notifyInSync) {
  const proxyState = proxyStateMap.get(proxyObject);
  if ((import.meta.env && import.meta.env.MODE) !== "production" && !proxyState) {
    console.warn("Please use proxy object");
  }
  let promise;
  const ops = [];
  const addListener = proxyState[3];
  let isListenerActive = false;
  const listener = (op) => {
    ops.push(op);
    if (notifyInSync) {
      callback(ops.splice(0));
      return;
    }
    if (!promise) {
      promise = Promise.resolve().then(() => {
        promise = void 0;
        if (isListenerActive) {
          callback(ops.splice(0));
        }
      });
    }
  };
  const removeListener = addListener(listener);
  isListenerActive = true;
  return () => {
    isListenerActive = false;
    removeListener();
  };
}

// node_modules/@web3modal/core/dist/index.js
var import_buffer = __toESM(require_buffer());
var M;
var m = { ethereumClient: void 0, setEthereumClient(e2) {
  M = e2;
}, client() {
  if (M)
    return M;
  throw new Error("ClientCtrl has no client set");
} };
var i = proxy({ history: ["ConnectWallet"], view: "ConnectWallet", data: void 0 });
var f = { state: i, subscribe(e2) {
  return subscribe(i, () => e2(i));
}, push(e2, t2) {
  e2 !== i.view && (i.view = e2, t2 && (i.data = t2), i.history.push(e2));
}, reset(e2) {
  i.view = e2, i.history = [e2];
}, replace(e2) {
  i.history.length > 1 && (i.history[i.history.length - 1] = e2, i.view = e2);
}, goBack() {
  if (i.history.length > 1) {
    i.history.pop();
    const [e2] = i.history.slice(-1);
    i.view = e2;
  }
}, setData(e2) {
  i.data = e2;
} };
var c2 = { WALLETCONNECT_DEEPLINK_CHOICE: "WALLETCONNECT_DEEPLINK_CHOICE", W3M_VERSION: "W3M_VERSION", RECOMMENDED_WALLET_AMOUNT: 9, isMobile() {
  return typeof window < "u" ? !!(window.matchMedia("(pointer:coarse)").matches || /Android|webOS|iPhone|iPad|iPod|BlackBerry|Opera Mini/u.test(navigator.userAgent)) : false;
}, isAndroid() {
  return c2.isMobile() && navigator.userAgent.toLowerCase().includes("android");
}, isIos() {
  const e2 = navigator.userAgent.toLowerCase();
  return c2.isMobile() && (e2.includes("iphone") || e2.includes("ipad"));
}, isHttpUrl(e2) {
  return e2.startsWith("http://") || e2.startsWith("https://");
}, isArray(e2) {
  return Array.isArray(e2) && e2.length > 0;
}, formatNativeUrl(e2, t2, n) {
  if (c2.isHttpUrl(e2))
    return this.formatUniversalUrl(e2, t2, n);
  let s2 = e2;
  s2.includes("://") || (s2 = e2.replaceAll("/", "").replaceAll(":", ""), s2 = `${s2}://`), this.setWalletConnectDeepLink(s2, n);
  const a = encodeURIComponent(t2);
  return `${s2}wc?uri=${a}`;
}, formatUniversalUrl(e2, t2, n) {
  if (!c2.isHttpUrl(e2))
    return this.formatNativeUrl(e2, t2, n);
  let s2 = e2;
  e2.endsWith("/") && (s2 = e2.slice(0, -1)), this.setWalletConnectDeepLink(s2, n);
  const a = encodeURIComponent(t2);
  return `${s2}/wc?uri=${a}`;
}, async wait(e2) {
  return new Promise((t2) => {
    setTimeout(t2, e2);
  });
}, openHref(e2, t2) {
  window.open(e2, t2, "noreferrer noopener");
}, setWalletConnectDeepLink(e2, t2) {
  localStorage.setItem(c2.WALLETCONNECT_DEEPLINK_CHOICE, JSON.stringify({ href: e2, name: t2 }));
}, setWalletConnectAndroidDeepLink(e2) {
  const [t2] = e2.split("?");
  localStorage.setItem(c2.WALLETCONNECT_DEEPLINK_CHOICE, JSON.stringify({ href: t2, name: "Android" }));
}, setWeb3ModalVersionInStorage() {
  typeof localStorage < "u" && localStorage.setItem(c2.W3M_VERSION, "2.3.1");
}, getWalletRouterData() {
  var e2;
  const t2 = (e2 = f.state.data) == null ? void 0 : e2.Wallet;
  if (!t2)
    throw new Error('Missing "Wallet" view data');
  return t2;
}, getSwitchNetworkRouterData() {
  var e2;
  const t2 = (e2 = f.state.data) == null ? void 0 : e2.SwitchNetwork;
  if (!t2)
    throw new Error('Missing "SwitchNetwork" view data');
  return t2;
} };
var r = proxy({ selectedChain: void 0, chains: void 0, standaloneChains: void 0, standaloneUri: void 0, isStandalone: false, isCustomDesktop: false, isCustomMobile: false, isDataLoaded: false, isUiLoaded: false, isInjectedMobile: false, walletConnectVersion: 1 });
var d = { state: r, subscribe(e2) {
  return subscribe(r, () => e2(r));
}, setChains(e2) {
  r.chains = e2;
}, setStandaloneChains(e2) {
  r.standaloneChains = e2;
}, setStandaloneUri(e2) {
  r.standaloneUri = e2;
}, getSelectedChain() {
  const e2 = m.client().getNetwork().chain;
  return e2 && (r.selectedChain = e2), r.selectedChain;
}, setSelectedChain(e2) {
  r.selectedChain = e2;
}, setIsStandalone(e2) {
  r.isStandalone = e2;
}, setIsCustomDesktop(e2) {
  r.isCustomDesktop = e2;
}, setIsCustomMobile(e2) {
  r.isCustomMobile = e2;
}, setIsDataLoaded(e2) {
  r.isDataLoaded = e2;
}, setIsUiLoaded(e2) {
  r.isUiLoaded = e2;
}, setWalletConnectVersion(e2) {
  r.walletConnectVersion = e2;
}, setIsInjectedMobile(e2) {
  r.isInjectedMobile = e2;
} };
var O = proxy({ projectId: "", mobileWallets: void 0, desktopWallets: void 0, walletImages: void 0, chainImages: void 0, tokenImages: void 0, tokenContracts: void 0, standaloneChains: void 0, enableStandaloneMode: false, enableNetworkView: false, enableAccountView: true, enableExplorer: true, defaultChain: void 0, explorerExcludedWalletIds: void 0, explorerRecommendedWalletIds: void 0, termsOfServiceUrl: void 0, privacyPolicyUrl: void 0 });
var b = { state: O, subscribe(e2) {
  return subscribe(O, () => e2(O));
}, setConfig(e2) {
  var t2, n, s2, a;
  d.setStandaloneChains(e2.standaloneChains), d.setIsStandalone(!!((t2 = e2.standaloneChains) != null && t2.length) || !!e2.enableStandaloneMode), d.setIsCustomMobile(!!((n = e2.mobileWallets) != null && n.length)), d.setIsCustomDesktop(!!((s2 = e2.desktopWallets) != null && s2.length)), d.setWalletConnectVersion((a = e2.walletConnectVersion) != null ? a : 1), d.state.isStandalone || (d.setChains(m.client().chains), d.setIsInjectedMobile(c2.isMobile() && m.client().isInjectedProviderInstalled())), e2.defaultChain && d.setSelectedChain(e2.defaultChain), c2.setWeb3ModalVersionInStorage(), Object.assign(O, e2);
} };
var o = proxy({ address: void 0, profileName: void 0, profileAvatar: void 0, profileLoading: false, balanceLoading: false, balance: void 0, isConnected: false });
var V = { state: o, subscribe(e2) {
  return subscribe(o, () => e2(o));
}, getAccount() {
  const e2 = m.client().getAccount();
  o.address = e2.address, o.isConnected = e2.isConnected;
}, async fetchProfile(e2, t2) {
  var n;
  try {
    o.profileLoading = true;
    const s2 = t2 != null ? t2 : o.address, a = (n = d.state.chains) == null ? void 0 : n.find((l2) => l2.id === 1);
    if (s2 && a) {
      const [l2, u] = await Promise.all([m.client().fetchEnsName({ address: s2, chainId: 1 }), m.client().fetchEnsAvatar({ address: s2, chainId: 1 })]);
      u && await e2(u), o.profileName = l2, o.profileAvatar = u;
    }
  } finally {
    o.profileLoading = false;
  }
}, async fetchBalance(e2) {
  try {
    const { chain: t2 } = m.client().getNetwork(), { tokenContracts: n } = b.state;
    let s2;
    t2 && n && (s2 = n[t2.id]), o.balanceLoading = true;
    const a = e2 != null ? e2 : o.address;
    if (a) {
      const l2 = await m.client().fetchBalance({ address: a, token: s2 });
      o.balance = { amount: l2.formatted, symbol: l2.symbol };
    }
  } finally {
    o.balanceLoading = false;
  }
}, setAddress(e2) {
  o.address = e2;
}, setIsConnected(e2) {
  o.isConnected = e2;
}, resetBalance() {
  o.balance = void 0;
}, resetAccount() {
  o.address = void 0, o.isConnected = false, o.profileName = void 0, o.profileAvatar = void 0, o.balance = void 0;
} };
var S = "https://explorer-api.walletconnect.com";
async function j(e2, t2) {
  const n = new URL(e2, S);
  return n.searchParams.append("projectId", b.state.projectId), Object.entries(t2).forEach(([s2, a]) => {
    a && n.searchParams.append(s2, String(a));
  }), (await fetch(n)).json();
}
var h2 = { async getDesktopListings(e2) {
  return j("/w3m/v1/getDesktopListings", e2);
}, async getMobileListings(e2) {
  return j("/w3m/v1/getMobileListings", e2);
}, async getInjectedListings(e2) {
  return j("/w3m/v1/getInjectedListings", e2);
}, async getAllListings(e2) {
  return j("/w3m/v1/getAllListings", e2);
}, getWalletImageUrl(e2) {
  return `${S}/w3m/v1/getWalletImage/${e2}?projectId=${b.state.projectId}`;
}, getAssetImageUrl(e2) {
  return `${S}/w3m/v1/getAssetImage/${e2}?projectId=${b.state.projectId}`;
} };
var R = Object.defineProperty;
var U = Object.getOwnPropertySymbols;
var _ = Object.prototype.hasOwnProperty;
var B = Object.prototype.propertyIsEnumerable;
var N = (e2, t2, n) => t2 in e2 ? R(e2, t2, { enumerable: true, configurable: true, writable: true, value: n }) : e2[t2] = n;
var H = (e2, t2) => {
  for (var n in t2 || (t2 = {}))
    _.call(t2, n) && N(e2, n, t2[n]);
  if (U)
    for (var n of U(t2))
      B.call(t2, n) && N(e2, n, t2[n]);
  return e2;
};
var k = c2.isMobile();
var g = proxy({ wallets: { listings: [], total: 0, page: 1 }, injectedWallets: [], search: { listings: [], total: 0, page: 1 }, recomendedWallets: [] });
var X = { state: g, async getRecomendedWallets() {
  const { explorerRecommendedWalletIds: e2, explorerExcludedWalletIds: t2 } = b.state;
  if (e2 === "NONE" || t2 === "ALL" && !e2)
    return g.recomendedWallets;
  if (c2.isArray(e2)) {
    const n = { recommendedIds: e2.join(",") }, { listings: s2 } = await h2.getAllListings(n), a = Object.values(s2);
    a.sort((l2, u) => {
      const v = e2.indexOf(l2.id), I = e2.indexOf(u.id);
      return v - I;
    }), g.recomendedWallets = a;
  } else {
    const { standaloneChains: n, walletConnectVersion: s2 } = d.state, a = n == null ? void 0 : n.join(","), l2 = c2.isArray(t2), u = { page: 1, entries: c2.RECOMMENDED_WALLET_AMOUNT, chains: a, version: s2, excludedIds: l2 ? t2.join(",") : void 0 }, { listings: v } = k ? await h2.getMobileListings(u) : await h2.getDesktopListings(u);
    g.recomendedWallets = Object.values(v);
  }
  return g.recomendedWallets;
}, async getWallets(e2) {
  const t2 = H({}, e2), { explorerRecommendedWalletIds: n, explorerExcludedWalletIds: s2 } = b.state, { recomendedWallets: a } = g;
  if (s2 === "ALL")
    return g.wallets;
  a.length ? t2.excludedIds = a.map((T) => T.id).join(",") : c2.isArray(n) && (t2.excludedIds = n.join(",")), c2.isArray(s2) && (t2.excludedIds = [t2.excludedIds, s2].filter(Boolean).join(","));
  const { page: l2, search: u } = e2, { listings: v, total: I } = k ? await h2.getMobileListings(t2) : await h2.getDesktopListings(t2), y2 = Object.values(v), A = u ? "search" : "wallets";
  return g[A] = { listings: [...g[A].listings, ...y2], total: I, page: l2 != null ? l2 : 1 }, { listings: y2, total: I };
}, async getInjectedWallets() {
  const { listings: e2 } = await h2.getInjectedListings({}), t2 = Object.values(e2);
  return g.injectedWallets = t2, g.injectedWallets;
}, getWalletImageUrl(e2) {
  return h2.getWalletImageUrl(e2);
}, getAssetImageUrl(e2) {
  return h2.getAssetImageUrl(e2);
}, resetSearch() {
  g.search = { listings: [], total: 0, page: 1 };
} };
var W = proxy({ pairingUri: "", pairingError: false });
var D = { state: W, subscribe(e2) {
  return subscribe(W, () => e2(W));
}, setPairingUri(e2) {
  W.pairingUri = e2;
}, setPairingError(e2) {
  W.pairingError = e2;
} };
var L = proxy({ open: false });
var Y = { state: L, subscribe(e2) {
  return subscribe(L, () => e2(L));
}, async open(e2) {
  return new Promise((t2) => {
    const { isStandalone: n, isUiLoaded: s2, isDataLoaded: a } = d.state, { pairingUri: l2 } = D.state, { isConnected: u } = V.state, { enableNetworkView: v } = b.state;
    if (n ? (d.setStandaloneUri(e2 == null ? void 0 : e2.uri), d.setStandaloneChains(e2 == null ? void 0 : e2.standaloneChains), f.reset("ConnectWallet")) : e2 != null && e2.route ? f.reset(e2.route) : u ? f.reset("Account") : v ? f.reset("SelectNetwork") : f.reset("ConnectWallet"), s2 && a && (n || l2 || u))
      L.open = true, t2();
    else {
      const I = setInterval(() => {
        const y2 = d.state, A = D.state;
        y2.isUiLoaded && y2.isDataLoaded && (y2.isStandalone || A.pairingUri || u) && (clearInterval(I), L.open = true, t2());
      }, 200);
    }
  });
}, close() {
  L.open = false;
} };
var K = Object.defineProperty;
var x = Object.getOwnPropertySymbols;
var J = Object.prototype.hasOwnProperty;
var q = Object.prototype.propertyIsEnumerable;
var P = (e2, t2, n) => t2 in e2 ? K(e2, t2, { enumerable: true, configurable: true, writable: true, value: n }) : e2[t2] = n;
var z = (e2, t2) => {
  for (var n in t2 || (t2 = {}))
    J.call(t2, n) && P(e2, n, t2[n]);
  if (x)
    for (var n of x(t2))
      q.call(t2, n) && P(e2, n, t2[n]);
  return e2;
};
function F() {
  return typeof matchMedia < "u" && matchMedia("(prefers-color-scheme: dark)").matches;
}
var E = proxy({ themeMode: F() ? "dark" : "light" });
var Z = { state: E, subscribe(e2) {
  return subscribe(E, () => e2(E));
}, setThemeConfig(e2) {
  const { themeMode: t2, themeVariables: n } = e2;
  t2 && (E.themeMode = t2), n && (E.themeVariables = z({}, n));
} };
var w = proxy({ open: false, message: "", variant: "success" });
var ee = { state: w, subscribe(e2) {
  return subscribe(w, () => e2(w));
}, openToast(e2, t2) {
  w.open = true, w.message = e2, w.variant = t2;
}, closeToast() {
  w.open = false;
} };
typeof window < "u" && (window.Buffer || (window.Buffer = import_buffer.Buffer), window.global || (window.global = window), window.process || (window.process = { env: {} }));

export {
  m,
  f,
  c2 as c,
  d,
  b,
  V,
  X,
  D,
  Y,
  Z,
  ee
};
//# sourceMappingURL=chunk-BM5FIVRF.js.map
